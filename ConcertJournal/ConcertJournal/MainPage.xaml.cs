using System;
using System.Collections.ObjectModel;
using System.Linq;                      // <= needed for LINQ
using ConcertJournal.Models;            // for Concert
using ConcertJournal.Views;             // for navigation pages
using Microsoft.Maui.Controls;

namespace ConcertJournal;

public partial class MainPage : ContentPage
{
    // ----- UI bindings -----

    // Show/hide stats frame
    bool _hasConcerts;
    public bool HasConcerts
    {
        get => _hasConcerts;
        set
        {
            _hasConcerts = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(ShowEmptyHints));   // already there
            OnPropertyChanged(nameof(ShowWelcomeHero));  // NEW
        }
    }

    public bool ShowWelcomeHero => !IsAddingConcert;

    // Indicate that the AddConcert flow is active
    bool _isAddingConcert;
    public bool IsAddingConcert
    {
        get => _isAddingConcert;
        set
        {
            _isAddingConcert = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(ShowEmptyHints));   // already there
            OnPropertyChanged(nameof(ShowWelcomeHero));  // NEW
        }
    }

    // Combined flag used by XAML to show the two text boxes + arrow
    public bool ShowEmptyHints => !HasConcerts && !IsAddingConcert;

    // Status counts
    int _happenedCount, _scheduledCount, _totalCount;
    public int HappenedCount
    {
        get => _happenedCount;
        set { _happenedCount = value; OnPropertyChanged(); }
    }
    public int ScheduledCount
    {
        get => _scheduledCount;
        set { _scheduledCount = value; OnPropertyChanged(); }
    }
    public int TotalCount
    {
        get => _totalCount;
        set { _totalCount = value; OnPropertyChanged(); }
    }

    // Top lists for stats panel (your XAML binds to these)
    public ObservableCollection<StatRow> PerformerStats { get; } = new();
    public ObservableCollection<StatRow> LocationStats { get; } = new();
    public ObservableCollection<StatRow> DateStats { get; } = new();   // <= FIXED
    public ObservableCollection<Concert> Concerts { get; } = new();

    public MainPage()
    {
        // Fix for CS0103: Ensure InitializeComponent is available
        // This method is generated by the XAML compiler and requires the partial class and correct inheritance.
        InitializeComponent();
        BindingContext = this;
    }

    // Load data each time the page appears
    protected override async void OnAppearing()
    {
        base.OnAppearing();

        var concerts = await App.Database.GetConcertsAsync();

        Concerts.Clear();
        if (concerts != null)
            foreach (var c in concerts)
                Concerts.Add(c);

        HasConcerts = Concerts.Count > 0;

        BuildStatusCounts(concerts ?? new List<Concert>());
    }

    // ---- Bottom bar navigation ----
    private async void OnStartPageClicked(object sender, EventArgs e)
        => await Navigation.PopToRootAsync();

    private async void OnAddConcertClicked(object sender, EventArgs e)
        => await Navigation.PushAsync(new AddConcertPage(), false);

    private async void OnConcertListClicked(object sender, EventArgs e)
        => await Navigation.PushAsync(new ConcertListPage(), false);

    // ===== Stats helpers =====
    private void BuildStatusCounts(IList<Concert> concerts)
    {
        HappenedCount = ScheduledCount = 0;
        TotalCount = concerts?.Count ?? 0;
        if (concerts == null || concerts.Count == 0) return;

        foreach (var c in concerts)
        {
            var status = GetStatus(c); // "happened" | "scheduled" | ""
            switch (status)
            {
                case "scheduled": ScheduledCount++; break;
                case "happened": HappenedCount++; break;
            }
        }
    }
    private async void OnSettingsPageClicked(object sender, EventArgs e)
    {
        await Navigation.PushAsync(new SettingsPage(), false);
    }


    private static string GetStatus(Concert c)
    {
        if (c == null || !c.Date.HasValue)
            return "";

        var d = c.Date.Value.Date;

        if (d <= DateTime.Today)
            return "happened";   // past or today
        else
            return "scheduled";  // future
    }

    // Build the three “Top” lists used by your XAML
    private void BuildTopLists(IList<Concert> concerts)
    {
        PerformerStats.Clear();
        LocationStats.Clear();
        DateStats.Clear();

        if (concerts == null || concerts.Count == 0) return;

        // Performers (split by comma)
        var performerCounts = concerts
            .SelectMany(c => (c.Performers ?? "")
                .Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries))
            .GroupBy(p => p)
            .Select(g => new StatRow(g.Key, g.Count()))
            .OrderByDescending(r => r.Count).ThenBy(r => r.Name).Take(5);
        foreach (var r in performerCounts) PerformerStats.Add(r);

        // Locations (Country / City)
        var locationCounts = concerts
            .Select(c => $"{(c.Country ?? "").Trim()}{(string.IsNullOrWhiteSpace(c.City) ? "" : " / " + c.City.Trim())}")
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .GroupBy(s => s)
            .Select(g => new StatRow(g.Key, g.Count()))
            .OrderByDescending(r => r.Count).ThenBy(r => r.Name).Take(5);
        foreach (var r in locationCounts) LocationStats.Add(r);

        // Dates (Month-Year)
        var dateCounts = concerts
            .Where(c => c.Date.HasValue)
            .GroupBy(c => new { c.Date!.Value.Year, c.Date!.Value.Month })
            .Select(g => new StatRow(new DateTime(g.Key.Year, g.Key.Month, 1).ToString("MMM yyyy"), g.Count()))
            .OrderByDescending(r => r.Count).ThenBy(r => r.Name).Take(5);
        foreach (var r in dateCounts) DateStats.Add(r);

    }

    // Row model for the small stat lists
    public record StatRow(string Name, int Count)
    {
    };

    private async void OnCardTapped(object sender, TappedEventArgs e)
    {
        if (e.Parameter is Concert c)
        {
            await Navigation.PushAsync(new ConcertDetailsPage(c));
        }
    }

    
}

